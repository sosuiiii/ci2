name: iOS starter workflow

on:
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.0.app

      - name: Print Xcode version
        run: xcodebuild -version

      - name: Print available simulators
        run: xcrun simctl list

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=iPhone 16"

      - name: Restore VRT snapshots
        uses: actions/cache@v3
        id: restore-vrt
        with:
          path: ./citest02/Snapshots/__Snapshots__/SnapshotFilePath
          key: "snapshot-test"

      - name: Check if images exist in SnapshotFilePath folder
        run: |
          count=$(find ./citest02/Snapshots/__Snapshots__/SnapshotFilePath -type f \( -iname "*.png" -o -iname "*.jpg" \) | wc -l)
          if [ $count -gt 0 ]; then
            echo "Found $count image(s) in SnapshotFilePath folder."
          else
            echo "No images found in SnapshotFilePath folder."
          fi

      - name: Install ImageMagick on macOS
        run: brew install imagemagick

      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=iPhone 16"

      - name: Generate diff images for all failed snapshots using ksdiff
        if: failure()
        run: |
          set -e
          FAILED_DIR="./citest02/Snapshots/__Snapshots__/Failure/SnapshotFilePath"
          SUCCESS_DIR="./citest02/Snapshots/__Snapshots__/SnapshotFilePath"
          DIFF_DIR="$(pwd)/artifacts/diffs"
          mkdir -p "$DIFF_DIR"

          for failed in "$FAILED_DIR"/*; do
            filename=$(basename "$failed")
            success="$SUCCESS_DIR/$filename"
            if [ -f "$success" ]; then
              diff_file="$DIFF_DIR/diff_$filename"
              compare "$success" "$failed" "$diff_file" || true
            fi
          done

      - name: Upload diff images as Artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-diffs
          path: artifacts/diffs/*.png

      - name: Create GitHub Release (if not exists)
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_NAME="snapshot-diff-release"
          EXISTING_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r ".[] | select(.name==\"$RELEASE_NAME\") | .id")
      
          if [ -z "$EXISTING_RELEASE" ]; then
            echo "Creating new release..."
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d "{\"tag_name\": \"snapshot-diff\", \"name\": \"$RELEASE_NAME\", \"body\": \"Snapshot diff images\"}")
            RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          else
            echo "Release already exists. Using ID: $EXISTING_RELEASE"
            RELEASE_ID=$EXISTING_RELEASE
          fi
      
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

      - name: Upload diff images to GitHub Release
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in artifacts/diffs/*.png; do
            echo "Uploading $file to GitHub Release..."
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$(basename "$file")" \
              --data-binary @$file
          done

      - name: Comment on PR with structured snapshot diffs from Release
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/snapshot-diff"
      
          # コメント本文を printf で改行付きで構築
          COMMENT_BODY=$(printf "🚨 **Snapshotテストで差分が発生しています** 🚨\n\n")
          COMMENT_BODY+=$(printf "以下に画像の差分を表示します。\n\n")
          COMMENT_BODY+=$(printf "詳細な画像はこちらからダウンロードしてください。\n")
          COMMENT_BODY+=$(printf "[📥 Artifactsをダウンロード](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)\n\n")
      
          COUNT=1
          for file in artifacts/diffs/*.png; do
            IMAGE_URL="$RELEASE_URL/$(basename "$file")"
      
            COMMENT_BODY+=$(printf "### 画像${COUNT}\n\n")
            COMMENT_BODY+=$(printf "| 既存 | 差分 | 新規 |\n")
            COMMENT_BODY+=$(printf "| -- | -- | -- |\n")
            COMMENT_BODY+=$(printf "| 空 | <img src=\"$IMAGE_URL\" width=\"300\"> | 空 |\n\n")
      
            COUNT=$((COUNT + 1))
          done
      
          # JSONとして正しくエスケープし、GitHub API に送信
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
            -d "$(jq -Rs --arg body "$COMMENT_BODY" '{body: $body}' <<< "")"

      # Issueにあげて公開URLを取得すると良さそう
      - name: Cache VRT snapshots
        if: always()
        uses: actions/cache/save@v3
        id: vrt-cache
        with:
          path: ./citest02/Snapshots/__Snapshots__/SnapshotFilePath
          key: "snapshot-test"
