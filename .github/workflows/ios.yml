name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.0.app
      - name: Print Xcode version
        run: xcodebuild -version
      - name: Print available simulators
        run: xcrun simctl list
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=iPhone 16"
      - name: Restore VRT snapshots
        uses: actions/cache@v3
        id: restore-vrt
        with:
          path: ./citest02/Snapshots/__Snapshots__/SnapshotFilePath
          key: "snapshot-test"
#          key: ${{ runner.os }}-snapshot-${{ hashFiles('./citest02/Snapshots/__Snapshots__/SnapshotFilePath/**/*') }}
      - name: Check if images exist in SnapshotFilePath folder
        run: |
          count=$(find ./citest02/Snapshots/__Snapshots__/SnapshotFilePath -type f \( -iname "*.png" -o -iname "*.jpg" \) | wc -l)
          if [ $count -gt 0 ]; then
            echo "Found $count image(s) in SnapshotFilePath folder."
          else
            echo "No images found in SnapshotFilePath folder."
          fi

      - name: Install ImageMagick on macOS
        run: brew install imagemagick

      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=iPhone 16"

# 複数の失敗したスナップショットファイルに対して、成功時と同名の画像と比較してdiff画像を生成する
      - name: Generate diff images for all failed snapshots using ksdiff
        if: failure()
        run: |
          set -e
          # ※ 以下のパスは環境に合わせて修正してください
          FAILED_DIR="./citest02/Snapshots/__Snapshots__/Failure/SnapshotFilePath"
          SUCCESS_DIR="./citest02/Snapshots/__Snapshots__/SnapshotFilePath"
          DIFF_DIR="$(pwd)/artifacts/diffs"
          mkdir -p "$DIFF_DIR"
          
          # 失敗ディレクトリ内の各ファイルに対して処理を実施
          for failed in "$FAILED_DIR"/*; do
            filename=$(basename "$failed")
            success="$SUCCESS_DIR/$filename"
            if [ -f "$success" ]; then
              diff_file="$DIFF_DIR/diff_$filename"
              echo "Generating diff for $filename"
              # 例: old.png と new.png の差分画像を diff.png として出力
              compare "$success" "$failed" "$diff_file"
              if [ ! -f "$diff_file" ]; then
                echo "Failed to generate diff for $filename"
                exit 1
              else
                echo "Success: $diff_file"
              fi
            else
              echo "Success snapshot not found for $filename, skipping."
            fi
          done
        shell: bash

      # 生成した複数のdiff画像をアーティファクトとしてアップロード
      - name: Upload diff artifacts
        if: failure()
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: snapshot-diff
          path: artifacts/diffs

      - name: Cache VRT snapshots
        if: always()
        uses: actions/cache/save@v3
        id: vrt-cache
        with:
          path: ./citest02/Snapshots/__Snapshots__/SnapshotFilePath
          key: "snapshot-test"
#          key: ${{ runner.os }}-snapshot-${{ hashFiles('./citest02/Snapshots/__Snapshots__/SnapshotFilePath/**/*') }}
