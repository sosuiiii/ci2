name: iOS starter workflow

on:
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.0.app

      - name: Print Xcode version
        run: xcodebuild -version

      - name: Print available simulators
        run: xcrun simctl list

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=iPhone 16"

      - name: Restore VRT snapshots
        uses: actions/cache@v3
        id: restore-vrt
        with:
          path: ./citest02/Snapshots/__Snapshots__/SnapshotFilePath
          key: "snapshot-test"

      - name: Check if images exist in SnapshotFilePath folder
        run: |
          count=$(find ./citest02/Snapshots/__Snapshots__/SnapshotFilePath -type f \( -iname "*.png" -o -iname "*.jpg" \) | wc -l)
          if [ $count -gt 0 ]; then
            echo "Found $count image(s) in SnapshotFilePath folder."
          else
            echo "No images found in SnapshotFilePath folder."
          fi

      - name: Install ImageMagick on macOS
        run: brew install imagemagick

      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=iPhone 16"

      - name: Generate diff images for all failed snapshots using ksdiff
        if: failure()
        run: |
          set -e
          FAILED_DIR="./citest02/Snapshots/__Snapshots__/Failure/SnapshotFilePath"
          SUCCESS_DIR="./citest02/Snapshots/__Snapshots__/SnapshotFilePath"
          DIFF_DIR="$(pwd)/artifacts/diffs"
          SUCCESS_OUT_DIR="$(pwd)/artifacts/success"
          FAILED_OUT_DIR="$(pwd)/artifacts/failed"
      
          mkdir -p "$DIFF_DIR" "$SUCCESS_OUT_DIR" "$FAILED_OUT_DIR"
      
          for failed in "$FAILED_DIR"/*; do
            filename=$(basename "$failed")
            success="$SUCCESS_DIR/$filename"
            if [ -f "$success" ]; then
              diff_file="$DIFF_DIR/diff_$filename"
              compare "$success" "$failed" "$diff_file" || true
      
              # 成功・失敗画像もコピー
              cp "$success" "$SUCCESS_OUT_DIR/$filename"
              cp "$failed" "$FAILED_OUT_DIR/$filename"
            fi
          done

      - name: Upload diff images as Artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-diffs
          path: artifacts/diffs/*.png

      - name: Upload success images as Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-success
          path: artifacts/success/*.png

      - name: Upload failed images as Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-failed
          path: artifacts/failed/*.png

      - name: 比較用ブランチ作成 & 画像をコミット
        run: |
          # Git のユーザー設定（必要に応じて）
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          # 新しい orphan ブランチを作成
          git checkout --orphan comparison-screenshots
          git reset --hard
          # artifacts ディレクトリを追加
          git add artifacts
          git commit -m "Add snapshot test screenshots for comparison"
          # ブランチを強制プッシュ
          git push origin comparison-screenshots --force

      - name: コメント本文を生成
        id: generate_comment
        shell: bash
        run: |
          # リポジトリ情報と新しいブランチ名から画像 URL のベースを生成
          REPO=${GITHUB_REPOSITORY}
          BRANCH=comparison-screenshots
          BASE_URL="https://raw.githubusercontent.com/${REPO}/${BRANCH}/artifacts"
          COMMENT="### Snapshot Test Results\n"

          # success ディレクトリ内の画像リンクを追加
          COMMENT+="\n**Success:**\n"
          for file in artifacts/success/*.png; do
            filename=$(basename "$file")
            COMMENT+="- [${filename}](${BASE_URL}/success/${filename})\n"
          done

          # failed ディレクトリ内の画像リンクを追加
          COMMENT+="\n**Failed:**\n"
          for file in artifacts/failed/*.png; do
            filename=$(basename "$file")
            COMMENT+="- [${filename}](${BASE_URL}/failed/${filename})\n"
          done

          # diffs ディレクトリ内の画像リンクを追加
          COMMENT+="\n**Diffs:**\n"
          for file in artifacts/diffs/*.png; do
            filename=$(basename "$file")
            COMMENT+="- [${filename}](${BASE_URL}/diffs/${filename})\n"
          done

          echo "$COMMENT" > comment.md
          echo "::set-output name=body::$(cat comment.md)"

      - name: PR にコメント投稿
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.generate_comment.outputs.body }}


#      - name: Create GitHub Release (if not exists)
#        if: failure()
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          RELEASE_NAME="snapshot-diff-release"
#          EXISTING_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
#            "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r ".[] | select(.name==\"$RELEASE_NAME\") | .id")
#      
#          if [ -z "$EXISTING_RELEASE" ]; then
#            echo "Creating new release..."
#            RESPONSE=$(curl -s -X POST \
#              -H "Authorization: token $GITHUB_TOKEN" \
#              -H "Accept: application/vnd.github.v3+json" \
#              "https://api.github.com/repos/${{ github.repository }}/releases" \
#              -d "{\"tag_name\": \"snapshot-diff\", \"name\": \"$RELEASE_NAME\", \"body\": \"Snapshot diff images\"}")
#            RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
#          else
#            echo "Release already exists. Using ID: $EXISTING_RELEASE"
#            RELEASE_ID=$EXISTING_RELEASE
#          fi
#      
#          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

#      - name: 必要なツールをインストール
#        if: failure()
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y jq curl

#      - name: Upload success, failed, and diff images to GitHub Release
#        if: failure()
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets"
#      
#          # 成功画像のアップロード
#          for file in artifacts/success/*.png; do
#            echo "Uploading success image: $file"
#            curl -s -X POST \
#              -H "Authorization: token $GITHUB_TOKEN" \
#              -H "Content-Type: application/octet-stream" \
#              "$UPLOAD_URL?name=success_$(basename "$file")" \
#              --data-binary @"$file"
#          done
#      
#          # 失敗画像のアップロード
#          for file in artifacts/failed/*.png; do
#            echo "Uploading failed image: $file"
#            curl -s -X POST \
#              -H "Authorization: token $GITHUB_TOKEN" \
#              -H "Content-Type: application/octet-stream" \
#              "$UPLOAD_URL?name=failed_$(basename "$file")" \
#              --data-binary @"$file"
#          done
#      
#          # 差分画像のアップロード
#          for file in artifacts/diffs/*.png; do
#            echo "Uploading diff image: $file"
#            curl -s -X POST \
#              -H "Authorization: token $GITHUB_TOKEN" \
#              -H "Content-Type: application/octet-stream" \
#              "$UPLOAD_URL?name=$(basename "$file")" \
#              --data-binary @"$file"
#          done

#      - name: Comment on PR with structured snapshot diffs from Release
#        if: failure()
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/snapshot-diff"
#      
#          # コメント本文の構築
#          COMMENT_BODY=$(cat <<EOF
#          🚨 **Snapshotテストで差分が発生しています** 🚨
#    
#          以下に画像の差分を表示します。
#    
#          詳細な画像はこちらからダウンロードしてください。
#          [📥 Artifactsをダウンロード](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
#    
#          EOF
#          )
#    
#              for file in artifacts/diffs/*.png; do
#                BASENAME=$(basename "$file")
#                FILENAME=${BASENAME#diff_}  # "diff_" を削除して元のファイル名を取得
#                DIFF_IMAGE_URL="$RELEASE_URL/$BASENAME"
#                SUCCESS_IMAGE_URL="$RELEASE_URL/success_${FILENAME}"
#                FAILED_IMAGE_URL="$RELEASE_URL/failed_${FILENAME}"
#    
#                COMMENT_BODY+=$(cat <<EOF
#    
#          ### ${FILENAME}
#    
#          | 既存 | 差分 | 今回の変更 |
#          | -- | -- | -- |
#          | <img src="${SUCCESS_IMAGE_URL}" width="300"> | <img src="${DIFF_IMAGE_URL}" width="300"> | <img src="${FAILED_IMAGE_URL}" width="300"> |
#    
#          EOF
#          )
#              done
#    
#              # JSONエスケープを適用し GitHub API に送信
#              curl -X POST \
#                -H "Authorization: token $GITHUB_TOKEN" \
#                -H "Accept: application/vnd.github+json" \
#                "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
#                -d "$(jq -Rs --arg body "$COMMENT_BODY" '{body: $body}' <<< "")"

      # Issueにあげて公開URLを取得すると良さそう
      - name: Cache VRT snapshots
        if: always()
        uses: actions/cache/save@v3
        id: vrt-cache
        with:
          path: ./citest02/Snapshots/__Snapshots__/SnapshotFilePath
          key: "snapshot-test"
