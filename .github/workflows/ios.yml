name: iOS starter workflow

on:
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.0.app

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "$(ls -A | grep -i \\.xcworkspace\$)" ]; then filetype_parameter="workspace" && file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"; else filetype_parameter="project" && file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"; fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=iPhone 16"

      - name: Restore VRT snapshots
        uses: actions/cache@v3
        id: restore-vrt
        with:
          path: |
            ./citest02/Features/**/Sources/SnapshotTest/__Snapshots__
          key: "snapshot-test"

      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "$(ls -A | grep -i \\.xcworkspace\$)" ]; then filetype_parameter="workspace" && file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"; else filetype_parameter="project" && file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"; fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=iPhone 16"

      - name: Generate diff images for failed snapshots
        if: failure()
        run: |
          mkdir -p artifacts/{diffs,success,failed}
          FAILED_DIRS=$(find ./citest02 -type d -path "*/Snapshots/Failure/*")
          for FAILED_DIR in $FAILED_DIRS; do
            FEATURE_DIR=$(echo "$FAILED_DIR" | sed 's|/Sources/Snapshots/Failure|/Sources/SnapshotTest/__Snapshots__|')
            for failed in "$FAILED_DIR"/*.png; do
              filename=$(basename "$failed")
              success="$FEATURE_DIR/$(basename "$FAILED_DIR")/$filename"
              if [ -f "$success" ]; then
                compare "$success" "$failed" artifacts/diffs/$filename || true
                cp "$success" artifacts/success/$filename
                cp "$failed" artifacts/failed/$filename
              fi
            done
          done
      - name: 比較用ブランチ作成 & 画像をコミット
        if: failure()
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout --orphan comparison-screenshots
          git add -f artifacts
          git commit -m "Add snapshot test screenshots for comparison"
          git push origin comparison-screenshots --force

      - name: コメント本文を生成
        if: failure()
        shell: bash
        run: |
          files=$(cd artifacts/success && ls *.png)
          REPO=${GITHUB_REPOSITORY}
          BRANCH=comparison-screenshots
          BASE_URL="https://raw.githubusercontent.com/${REPO}/${BRANCH}/artifacts"
          rows=""
          for fname in $files; do
            rows+="<tr><td>${fname}<br><img src='${BASE_URL}/success/${fname}' width='300'></td><td>${fname}<br><img src='${BASE_URL}/diffs/${fname}' width='300'></td><td>${fname}<br><img src='${BASE_URL}/failed/${fname}' width='300'></td></tr>"
          done
          comment="<table><thead><tr><th>既存</th><th>差分</th><th>今回</th></tr></thead><tbody>${rows}</tbody></table>"
          echo "$comment" > comment.md

      - name: PR にコメント投稿
        if: failure()
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: comment.md

      - name: Cache VRT snapshots
        if: always()
        uses: actions/cache/save@v3
        id: vrt-cache
        with:
          path: |
            ./citest02/Features/**/Sources/SnapshotTest/__Snapshots__
          key: "snapshot-test"
